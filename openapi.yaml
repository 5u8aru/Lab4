openapi: 3.0.3
info:
  title: Swagger Family Budget - OpenAPI 3.0
  description: |-
    This is an API for planning the family budget's application.
  version: 1.0.1
tags:
  - name: family_budget
    description: Everything about family budget
  - name: user
    description: Operations about user
  - name: personal_budget
    description: Everything about personal budget
  - name: transfer
    description: Operations with transactions
paths:
  /family_budget:
    post:
      tags:
        - family_budget
      summary: Create family budget
      description: Create a budget
      operationId: createBudget
      requestBody:
        description: Set an amount of money in budget
        content:
          application/json:
            schema:
              type: object
              properties:
                balance:
                  type: integer
                  format: int64
                  example: 10000
                income:
                  type: integer
                  format: int64
                  example: 0
                costs:
                  type: integer
                  format: int64
                  example: 0
                users:
                  type: array
                  xml:
                    wrapped: true
                  items:
                    $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family_budget' 
        '400':
          description: Invalid quantity of users supplied
        '405':
          description: Invalid input
      security:
      - user_auth:
        - user
          
  /family_budget/{budgetID}:
    put:
      tags:
        - family_budget
      summary: Update a family budget
      description: Update an amount of money in budget by Id
      operationId: updateBudget
      parameters:
        - name: budgetID
          in: path
          description: ID of budget to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent budget
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Family_budget'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family_budget'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Budget not found
        '405':
          description: Validation exception
      security:
      - user_auth:
        - user
        
    get:
        tags:
          - family_budget
        summary: Get budget by budget id
        description: ''
        operationId: getBudgetById
        parameters:
          - name: budgetID
            in: path
            description: 'The ID of budget that needs to be fetched.'
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Family_budget'          
          '400':
            description: Invalid id supplied
          '404':
            description: Budget not found
        security:
        - user_auth:
          - user
    delete:
        tags:
          - family_budget
        summary: Deletes a budget by ID
        description: delete a budget
        operationId: deleteBudget
        parameters:
          - name: budgetID
            in: path
            description: Budget id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '400':
            description: Invalid id supplied
          '404':
            description: Budget not found
        security:
        - user_auth:
          - user
  
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: ''
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'

  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_token:
                    type: string
                    example: string
        '400':
          description: Invalid username/password supplied
        '405':
          description: Validation error

  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
      - user_auth:
        - user
        
  /user/{user_id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByName
      parameters:
        - name: user_id
          in: path
          description: 'The id of user that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'          
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      security:
      - user_auth:
        - user
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: id of user that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the cinema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      security:
      - user_auth:
        - user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: The id of user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      security:
      - user_auth:
        - user
        
  /personal_budget:
    post:
      tags:
        - personal_budget
      summary: Create personal budget
      description: Create a budget
      operationId: createPBudget
      requestBody:
        description: Set an amount of money in budget
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                  example: 3
                balance:
                  type: integer
                  format: int64
                  example: 10000
                income:
                  type: integer
                  format: int64
                  example: 0
                costs:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Personal_budget'          
        '405':
          description: Invalid input
      security:
      - user_auth:
        - user
  
  /personal_budget/{PbudgetID}:
    get:
      tags:
        - personal_budget
      summary: Get personal budget by id
      description: ''
      operationId: getPBudgetById
      parameters:
        - name: PbudgetID
          in: path
          description: 'The ID of budget that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Personal_budget'          
        '400':
          description: Invalid id supplied
        '404':
          description: Budget not found
      security:
      - user_auth:
        - user
    put:
      tags:
        - personal_budget
      summary: Update a personal budget
      description: Update an amount of money in budget by Id
      operationId: updatePBudget
      parameters:
        - name: PbudgetID
          in: path
          description: ID of budget to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent budget
        content:
          application/json:
            schema:
              type: object
              properties:
                balance:
                  type: integer
                  format: int64
                  example: 1000
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Personal_budget'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Budget not found
        '405':
          description: Validation exception
      security:
      - user_auth:
        - user
    delete:
      tags:
        - personal_budget
      summary: Deletes a personal budget by ID
      description: delete a budget
      operationId: deletePBudget
      parameters:
        - name: PbudgetID
          in: path
          description: Budget id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Budget not found
      security:
      - user_auth:
        - user
        
  /transfer/make-transfer:     
    post:
      tags:
        - transfer
      summary: Create a transfer
      description: Create a transfer
      operationId: createTransfer
      requestBody:
        description: Do a transfer between personal and family budget
        required: true
        content:
          application/json:
                  schema:
                    $ref: '#/components/schemas/TransferOp' 
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferInfo'          
        '405':
          description: Invalid input
      security:
      - user_auth:
        - user
        
  /transfer/{PbudgetID}/transfers: 
    get:
      tags:
        - transfer
      summary: List of transfers
      description: ''
      operationId: PBudgetlist
      parameters:
        - name: PbudgetID
          in: path
          description: 'The ID of budget that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/TransferInfo'          
        '400':
          description: Invalid id supplied
        '404':
          description: Budget not found
      security:
      - user_auth:
        - user
          
components:
  schemas:
    UserInfo:
      required:
        - id
        - email
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
      xml:
        name: user_info
        
    UserCreate:
      required:
        - password
        - email
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
      xml:
        name: user_create
        
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
      xml:
        name: user_update
        
    Personal_budget:
      type: object
      properties:
        pbudget_id:
          type: integer
          format: int64
          example: 1
        balance:
          type: integer
          format: int64
          example: 10000
        income:
          type: integer
          format: int64
          example: 0
        costs:
          type: integer
          format: int64
          example: 0
        user_id:
          type: integer
          format: int64
          example: 3
      xml:
        name: personal_budget
        
    TransferInfo:
      required:
        - id
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 1
        from_id_pbudget:
            type: integer
            format: int64
            example: 5
        to_id_fbudget:
            type: integer
            format: int64
            example: 2
        amount:
          type: integer
          format: int64
          example: 2000
        datetime:
          type: string
          format: date
          example: '2017-02-15|20:26:08.937881'
      xml:
        name: transfer_info
      
    TransferOp:
      required:
        - from_id_pbudget
        - to_id_fbudget
        - amount
      type: object
      properties:
        from_id_pbudget:
            type: integer
            format: int64
            example: 5
        to_id_fbudget:
            type: integer
            format: int64
            example: 2
        amount:
          type: integer
          format: int64
          example: 2000 
      xml:
        name: transfer_operation
        
    Family_budget:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        balance:
          type: integer
          format: int64
          example: 10000
        income:
          type: integer
          format: int64
          example: 0
        costs:
          type: integer
          format: int64
          example: 0
        users:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UserInfo'
        date:
          type: string
          format: date
          example: '2017-02-15|20:26:08.937881'
      xml:
        name: family_budget
        
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: url
          scopes:
            user : Grants user access
